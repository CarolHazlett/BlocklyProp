/**
 * This class is generated by jOOQ
 */
package eu.creatingfuture.propeller.blocklyprop.db.generated.tables;


import eu.creatingfuture.propeller.blocklyprop.db.generated.Blocklyprop;
import eu.creatingfuture.propeller.blocklyprop.db.generated.Keys;
import eu.creatingfuture.propeller.blocklyprop.db.generated.tables.records.SecPermissionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecPermission extends TableImpl<SecPermissionRecord> {

	private static final long serialVersionUID = 1305317676;

	/**
	 * The reference instance of <code>blocklyprop.sec_permission</code>
	 */
	public static final SecPermission SEC_PERMISSION = new SecPermission();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SecPermissionRecord> getRecordType() {
		return SecPermissionRecord.class;
	}

	/**
	 * The column <code>blocklyprop.sec_permission.id</code>.
	 */
	public final TableField<SecPermissionRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.sec_permission.name</code>.
	 */
	public final TableField<SecPermissionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * Create a <code>blocklyprop.sec_permission</code> table reference
	 */
	public SecPermission() {
		this("sec_permission", null);
	}

	/**
	 * Create an aliased <code>blocklyprop.sec_permission</code> table reference
	 */
	public SecPermission(String alias) {
		this(alias, SEC_PERMISSION);
	}

	private SecPermission(String alias, Table<SecPermissionRecord> aliased) {
		this(alias, aliased, null);
	}

	private SecPermission(String alias, Table<SecPermissionRecord> aliased, Field<?>[] parameters) {
		super(alias, Blocklyprop.BLOCKLYPROP, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SecPermissionRecord, Long> getIdentity() {
		return Keys.IDENTITY_SEC_PERMISSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SecPermissionRecord> getPrimaryKey() {
		return Keys.KEY_SEC_PERMISSION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SecPermissionRecord>> getKeys() {
		return Arrays.<UniqueKey<SecPermissionRecord>>asList(Keys.KEY_SEC_PERMISSION_PRIMARY, Keys.KEY_SEC_PERMISSION_NAME_UNIQUE);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SecPermission as(String alias) {
		return new SecPermission(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SecPermission rename(String name) {
		return new SecPermission(name, null);
	}
}
