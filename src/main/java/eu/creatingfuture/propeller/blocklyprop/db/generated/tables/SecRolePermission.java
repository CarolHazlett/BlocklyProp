/**
 * This class is generated by jOOQ
 */
package eu.creatingfuture.propeller.blocklyprop.db.generated.tables;


import eu.creatingfuture.propeller.blocklyprop.db.generated.Blocklyprop;
import eu.creatingfuture.propeller.blocklyprop.db.generated.Keys;
import eu.creatingfuture.propeller.blocklyprop.db.generated.tables.records.SecRolePermissionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecRolePermission extends TableImpl<SecRolePermissionRecord> {

	private static final long serialVersionUID = -182993137;

	/**
	 * The reference instance of <code>blocklyprop.sec_role_permission</code>
	 */
	public static final SecRolePermission SEC_ROLE_PERMISSION = new SecRolePermission();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SecRolePermissionRecord> getRecordType() {
		return SecRolePermissionRecord.class;
	}

	/**
	 * The column <code>blocklyprop.sec_role_permission.id_role</code>.
	 */
	public final TableField<SecRolePermissionRecord, Long> ID_ROLE = createField("id_role", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.sec_role_permission.id_permission</code>.
	 */
	public final TableField<SecRolePermissionRecord, Long> ID_PERMISSION = createField("id_permission", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>blocklyprop.sec_role_permission</code> table reference
	 */
	public SecRolePermission() {
		this("sec_role_permission", null);
	}

	/**
	 * Create an aliased <code>blocklyprop.sec_role_permission</code> table reference
	 */
	public SecRolePermission(String alias) {
		this(alias, SEC_ROLE_PERMISSION);
	}

	private SecRolePermission(String alias, Table<SecRolePermissionRecord> aliased) {
		this(alias, aliased, null);
	}

	private SecRolePermission(String alias, Table<SecRolePermissionRecord> aliased, Field<?>[] parameters) {
		super(alias, Blocklyprop.BLOCKLYPROP, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SecRolePermissionRecord> getPrimaryKey() {
		return Keys.KEY_SEC_ROLE_PERMISSION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SecRolePermissionRecord>> getKeys() {
		return Arrays.<UniqueKey<SecRolePermissionRecord>>asList(Keys.KEY_SEC_ROLE_PERMISSION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SecRolePermission as(String alias) {
		return new SecRolePermission(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SecRolePermission rename(String name) {
		return new SecRolePermission(name, null);
	}
}
