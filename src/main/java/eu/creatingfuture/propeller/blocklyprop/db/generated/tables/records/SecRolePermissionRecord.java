/**
 * This class is generated by jOOQ
 */
package eu.creatingfuture.propeller.blocklyprop.db.generated.tables.records;


import eu.creatingfuture.propeller.blocklyprop.db.generated.tables.SecRolePermission;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SecRolePermissionRecord extends UpdatableRecordImpl<SecRolePermissionRecord> implements Record2<Long, Long> {

	private static final long serialVersionUID = -1805305325;

	/**
	 * Setter for <code>blocklyprop.sec_role_permission.id_role</code>.
	 */
	public void setIdRole(Long value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>blocklyprop.sec_role_permission.id_role</code>.
	 */
	public Long getIdRole() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>blocklyprop.sec_role_permission.id_permission</code>.
	 */
	public void setIdPermission(Long value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>blocklyprop.sec_role_permission.id_permission</code>.
	 */
	public Long getIdPermission() {
		return (Long) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Long, Long> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Long, Long> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return SecRolePermission.SEC_ROLE_PERMISSION.ID_ROLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return SecRolePermission.SEC_ROLE_PERMISSION.ID_PERMISSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getIdRole();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getIdPermission();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SecRolePermissionRecord value1(Long value) {
		setIdRole(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SecRolePermissionRecord value2(Long value) {
		setIdPermission(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SecRolePermissionRecord values(Long value1, Long value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached SecRolePermissionRecord
	 */
	public SecRolePermissionRecord() {
		super(SecRolePermission.SEC_ROLE_PERMISSION);
	}

	/**
	 * Create a detached, initialised SecRolePermissionRecord
	 */
	public SecRolePermissionRecord(Long idRole, Long idPermission) {
		super(SecRolePermission.SEC_ROLE_PERMISSION);

		setValue(0, idRole);
		setValue(1, idPermission);
	}
}
