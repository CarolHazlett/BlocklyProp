/**
 * This class is generated by jOOQ
 */
package eu.creatingfuture.propeller.blocklyprop.db.tables;


import eu.creatingfuture.propeller.blocklyprop.db.Blocklyprop;
import eu.creatingfuture.propeller.blocklyprop.db.Keys;
import eu.creatingfuture.propeller.blocklyprop.db.tables.records.ProjectRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Project extends TableImpl<ProjectRecord> {

	private static final long serialVersionUID = -1849245544;

	/**
	 * The reference instance of <code>blocklyprop.project</code>
	 */
	public static final Project PROJECT = new Project();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ProjectRecord> getRecordType() {
		return ProjectRecord.class;
	}

	/**
	 * The column <code>blocklyprop.project.id</code>.
	 */
	public final TableField<ProjectRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.project.id_user</code>.
	 */
	public final TableField<ProjectRecord, Integer> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.project.name</code>.
	 */
	public final TableField<ProjectRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>blocklyprop.project.description</code>.
	 */
	public final TableField<ProjectRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>blocklyprop.project.code</code>.
	 */
	public final TableField<ProjectRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>blocklyprop.project.type</code>.
	 */
	public final TableField<ProjectRecord, Integer> TYPE = createField("type", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>blocklyprop.project</code> table reference
	 */
	public Project() {
		this("project", null);
	}

	/**
	 * Create an aliased <code>blocklyprop.project</code> table reference
	 */
	public Project(String alias) {
		this(alias, PROJECT);
	}

	private Project(String alias, Table<ProjectRecord> aliased) {
		this(alias, aliased, null);
	}

	private Project(String alias, Table<ProjectRecord> aliased, Field<?>[] parameters) {
		super(alias, Blocklyprop.BLOCKLYPROP, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ProjectRecord> getPrimaryKey() {
		return Keys.KEY_PROJECT_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ProjectRecord>> getKeys() {
		return Arrays.<UniqueKey<ProjectRecord>>asList(Keys.KEY_PROJECT_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ProjectRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ProjectRecord, ?>>asList(Keys.PROJECT_USER);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Project as(String alias) {
		return new Project(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Project rename(String name) {
		return new Project(name, null);
	}
}
