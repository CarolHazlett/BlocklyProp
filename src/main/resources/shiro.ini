[main]
shiro.loginUrl = /login.jsp

# ds = eu.creatingfuture.propeller.blocklyprop.security.DataSourceProvider

# credentialsMatcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
# credentialsMatcher.hashAlgorithmName = SHA-256
# credentialsMatcher.hashIterations = 1024

# jdbcRealm = eu.creatingfuture.propeller.blocklyprop.security.JdbcSaltRealm
# jdbcRealm.dataSource = $ds
# jdbcRealm.credentialsMatcher = $credentialsMatcher
# jdbcRealm.authenticationQuery = select password, salt, id from blocklyprop.user where email = ?
# jdbcRealm.userRolesQuery = select r.name from user u join sec_user_role ur on i.id = ur.id_user join sec_role r on ur.id_role = r.id where u.email = ?
# jdbcRealm.permissionsQuery = select p.name from sec_role r join sec_role_permission rp on r.id = rp.id_role join sec_permission p on rp.id_permission = p.id where r.name = ?

# securityManager.realms = $jdbcRealm

credentialsMatcher = org.apache.shiro.authc.credential.SimpleCredentialsMatcher
#credentialsMatcher = com.parallax.server.blocklyprop.security.CloudSessionCredentialsMatcher

cloudsessionRealm = com.parallax.server.blocklyprop.security.CloudSessionAuthenticationRealm
cloudsessionRealm.credentialsMatcher = $credentialsMatcher

securityManager.realms = $cloudsessionRealm


[urls]
# library code (maybe add a hotlink protection?)
/lib/** = anon

# Regsitration, authentication, password reset
/login.jsp = authc
/register.jsp = anon
/register = anon
/logout = logout

/login.css = anon

# REST api and api documentation
/apidoc = anon
/rest/** = authcBasic,noSessionCreation

# Application pages
/** = authc, user
